use macros::generate_bitmasks_from_hoppings;
/// Size of the system.
pub const SIZE: usize = 4;
pub const ARRAY_SIZE: usize = (SIZE + 7) / 8;

/// Hubbard's model $U$ parameter
pub static CONS_U: f64 = 0.0;
/// Hubbard's model $t$ parameter
pub static CONS_T: f64 = -1.0;

/// Collection of the variationnal parameters
pub struct VarParams {
    pub fij: *const f64,
    pub vij: *const f64,
    pub gi: *const f64,
}

pub const NFIJ: usize = 4*SIZE*SIZE;
pub const NVIJ: usize = SIZE*SIZE;
pub const NGI: usize = SIZE;

pub static mut FIJ: [f64; NFIJ] = [
    0.65583263, 0.2579242 , 0.78342288, 0.86818364, 0.99423766,
    0.38035571, 0.47056418, 0.56113084, 0.1475486 , 0.5369956 ,
    0.26664678, 0.42718298, 0.23611604, 0.43433408, 0.53575446,
    0.07166779, 0.15895308, 0.71804482, 0.2714126 , 0.71162796,
    0.77433389, 0.28221235, 0.14508085, 0.49846785, 0.66801568,
    0.32978509, 0.6571238 , 0.03039801, 0.3468509 , 0.15403364,
    0.37306052, 0.90458229, 0.91791243, 0.43872965, 0.56242938,
    0.23684173, 0.46798428, 0.8399697 , 0.20428968, 0.46700014,
    0.08779668, 0.4836716 , 0.82304382, 0.46428091, 0.35912961,
    0.52023224, 0.12116029, 0.2411605 , 0.21063809, 0.19513569,
    0.5357807 , 0.59983385, 0.11489229, 0.79493793, 0.63347575,
    0.45736727, 0.85445574, 0.00426934, 0.41213109, 0.41722305,
    0.91049378, 0.26227231, 0.67512998, 0.89924604
];

pub static mut VIJ: [f64; NVIJ] = [
    0.38200108, 0.39699789, 0.99773244, 0.06024556, 0.89587208,
    0.72621538, 0.75943934, 0.47029373, 0.99266814, 0.09317458,
    0.4747971 , 0.00407951, 0.61192636, 0.98595942, 0.24153617,
    0.07105668
];

pub static mut GI: [f64; NGI] = [
    0.41160929, 0.37086116, 0.828815, 0.78192488
];

pub const HOPPINGS: [f64; SIZE*SIZE] = [
    0.0, 1.0, 0.0, 1.0,
    1.0, 0.0, 1.0, 0.0,
    0.0, 1.0, 0.0, 1.0,
    1.0, 0.0, 1.0, 0.0
];

generate_bitmasks_from_hoppings!(
[
    0.0, 1.0, 0.0, 1.0,
    1.0, 0.0, 1.0, 0.0,
    0.0, 1.0, 0.0, 1.0,
    1.0, 0.0, 1.0, 0.0
]
);
